// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Validators;
using Elements.Serialization.JSON;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using Hypar.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace MJTelescoperPlan
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public  class MJTelescoperPlanInputs : S3Args
    
    {
        [Newtonsoft.Json.JsonConstructor]
        
        public MJTelescoperPlanInputs(double @telescopeSpread, double @telescopeExponent, double @telescopeStepPercent, int @recurseLimit, double @baseHeight, double @maxHeight, Polygon @buildingPolygon, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey):
        base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<MJTelescoperPlanInputs>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @telescopeSpread, @telescopeExponent, @telescopeStepPercent, @recurseLimit, @baseHeight, @maxHeight, @buildingPolygon});
            }
        
            this.TelescopeSpread = @telescopeSpread;
            this.TelescopeExponent = @telescopeExponent;
            this.TelescopeStepPercent = @telescopeStepPercent;
            this.RecurseLimit = @recurseLimit;
            this.BaseHeight = @baseHeight;
            this.MaxHeight = @maxHeight;
            this.BuildingPolygon = @buildingPolygon;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        /// <summary>Max overall telescoping for a building arm.</summary>
        [Newtonsoft.Json.JsonProperty("TelescopeSpread", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(10D, 100D)]
        public double TelescopeSpread { get; set; } = 10D;
    
        /// <summary>Exponent controlling the height distribution.</summary>
        [Newtonsoft.Json.JsonProperty("TelescopeExponent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1.0D, 2.0D)]
        public double TelescopeExponent { get; set; } = 1D;
    
        /// <summary>Percentage shrink at each step.</summary>
        [Newtonsoft.Json.JsonProperty("TelescopeStepPercent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.9D, 1.0D)]
        public double TelescopeStepPercent { get; set; } = 0.9D;
    
        /// <summary>Number of branches.</summary>
        [Newtonsoft.Json.JsonProperty("RecurseLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 12)]
        public int RecurseLimit { get; set; } = 3;
    
        /// <summary>Height of base of telescoping.</summary>
        [Newtonsoft.Json.JsonProperty("BaseHeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(10D, 30.0D)]
        public double BaseHeight { get; set; } = 20D;
    
        /// <summary>Height of top of telescoping.</summary>
        [Newtonsoft.Json.JsonProperty("MaxHeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(30D, 150.0D)]
        public double MaxHeight { get; set; } = 80D;
    
        /// <summary>The initial polygon from which telescoping occurs.</summary>
        [Newtonsoft.Json.JsonProperty("BuildingPolygon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Polygon BuildingPolygon { get; set; }
    
    }
}