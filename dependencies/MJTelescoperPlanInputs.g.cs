// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Validators;
using Elements.Serialization.JSON;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using Hypar.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace MJTelescoperPlan
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public  class MJTelescoperPlanInputs : S3Args
    
    {
        [Newtonsoft.Json.JsonConstructor]
        
        public MJTelescoperPlanInputs(double @maxTelescoping, double @telescopingMultiplier, double @recurseLimit, double @minHeight, double @maxHeight, Polygon @buildingPolygon, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey):
        base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<MJTelescoperPlanInputs>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @maxTelescoping, @telescopingMultiplier, @recurseLimit, @minHeight, @maxHeight, @buildingPolygon});
            }
        
            this.MaxTelescoping = @maxTelescoping;
            this.TelescopingMultiplier = @telescopingMultiplier;
            this.RecurseLimit = @recurseLimit;
            this.MinHeight = @minHeight;
            this.MaxHeight = @maxHeight;
            this.BuildingPolygon = @buildingPolygon;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        /// <summary>Max overall telescoping for a building arm</summary>
        [Newtonsoft.Json.JsonProperty("MaxTelescoping", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(10D, 50D)]
        public double MaxTelescoping { get; set; } = 10D;
    
        /// <summary>Multiplier controlling the spread</summary>
        [Newtonsoft.Json.JsonProperty("TelescopingMultiplier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.0D, 1.0D)]
        public double TelescopingMultiplier { get; set; } = 0.25D;
    
        /// <summary>Number of branches</summary>
        [Newtonsoft.Json.JsonProperty("RecurseLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1D, 7D)]
        public double RecurseLimit { get; set; } = 3D;
    
        /// <summary>Min Height</summary>
        [Newtonsoft.Json.JsonProperty("MinHeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(10D, 30.0D)]
        public double MinHeight { get; set; } = 20D;
    
        /// <summary>Max Height</summary>
        [Newtonsoft.Json.JsonProperty("MaxHeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(30D, 100.0D)]
        public double MaxHeight { get; set; } = 60D;
    
        /// <summary>The initial polygon from which telescoping occurs.</summary>
        [Newtonsoft.Json.JsonProperty("BuildingPolygon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Polygon BuildingPolygon { get; set; }
    
    }
}